networks:
  honeypotharbor-internal-network:
    external: true

services:
  postgres:
    image: postgres:14
    #ports: 
    # - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.101

  elasticsearch:
    image: elasticsearch:9.1.4
    #ports: 
    # - "9200:9200"
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: >
        curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health |
        grep -q '"status":"green"'
      interval: 30s
      timeout: 10s
      retries: 20
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.102
    mem_limit: 0.5g

  logstash-1:
    image: logstash:9.1.2
    container_name: honeypotharbor-logstash-1
    environment:
      - xpack.monitoring.enabled=true
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/geoip:/usr/share/logstash/geoip
    depends_on:
      - elasticsearch
    #ports: 
    # - "5044:5044"
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.103

  logstash-2:
    image: logstash:9.1.2
    container_name: honeypotharbor-logstash-2
    environment:
      - xpack.monitoring.enabled=true
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/geoip:/usr/share/logstash/geoip
    depends_on:
      - elasticsearch
    #ports: 
    # - "5044:5044"
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.104

  logstash-3:
    image: logstash:9.1.2
    container_name: honeypotharbor-logstash-3
    environment:
      - xpack.monitoring.enabled=true
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/geoip:/usr/share/logstash/geoip
    depends_on:
      - elasticsearch
    #ports: 
    # - "5044:5044"
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.105

  backend-1:
    build: 
      context: ./backend
      network: host
    container_name: honeypotharbor-backend-1
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    #ports: 
    # - "8080:8080"
    environment:
      - API_KEY=${API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASS}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test: ["CMD", "wget", "--spider", "--header=x-api-key: ${API_KEY}", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.106

  backend-2:
    build: 
      context: ./backend
      network: host
    container_name: honeypotharbor-backend-2
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    #ports: 
    # - "8080:8080"
    environment:
      - API_KEY=${API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASS}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test: ["CMD", "wget", "--spider", "--header=x-api-key: ${API_KEY}", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.107

  backend-3:
    build: 
      context: ./backend
      network: host
    container_name: honeypotharbor-backend-3
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    #ports: 
    # - "8080:8080"
    environment:
      - API_KEY=${API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASS}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test: ["CMD", "wget", "--spider", "--header=x-api-key: ${API_KEY}", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.108

  frontend-1:
    build: 
      context: ./frontend
      network: host
    container_name: honeypotharbor-frontend-1
    #ports: 
    # - "80:80"
    depends_on:
      backend-1:
        condition: service_healthy
      backend-2:
        condition: service_healthy
      backend-3:
        condition: service_healthy
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.109

  frontend-2:
    build: 
      context: ./frontend
      network: host
    container_name: honeypotharbor-frontend-2
    #ports: 
    # - "80:80"
    depends_on:
      backend-1:
        condition: service_healthy
      backend-2:
        condition: service_healthy
      backend-3:
        condition: service_healthy
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.110
  
  frontend-3:
    build: 
      context: ./frontend
      network: host
    container_name: honeypotharbor-frontend-3
    #ports: 
    # - "80:80"
    depends_on:
      backend-1:
        condition: service_healthy
      backend-2:
        condition: service_healthy
      backend-3:
        condition: service_healthy
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.111

  nginx:
    image: nginx:alpine
    #ports:
    #  - "80:80"     # external access to frontend
    #  - "5044:5044" # external access to logstash
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    environment:
      - API_KEY=${API_KEY}
    depends_on:
      - frontend-1
      - frontend-2
      - frontend-3
      - logstash-1
      - logstash-2
      - logstash-3
    networks:
      honeypotharbor-internal-network:
        ipv4_address: 192.168.1.112

volumes:
  postgres_data:
  es_data:

